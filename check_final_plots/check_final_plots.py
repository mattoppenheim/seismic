#!/usr/bin/python3
''' Checks that all of the expected plots are generated by Reveal.
Checks files have a realistic file size.
Looks for a list of file names in final_plot_names.md.
Run with a sequence number e.g.
python3 check_final_plots.py 40
June 2023 Matthew Oppenheim
v0 not yet working
'''


import argparse
import os
from pathlib import Path
import logging
import sys

PLOTNAMES = r'plot_names.md'
PLOTS_BASE_DIR = r'/nfs/awa-data01/Reveal_Projects/3163_CGG_NVG_3D_2023/SuperVision/'

logging.basicConfig(level=logging.INFO, format='%(message)s')

parser = argparse.ArgumentParser()
parser.add_argument('sequence', type=str, help='sequence to check for final plots')

# minimum file size in bytes
MIN_SIZE = 102400 # 100 kB
# for testing
SEQ = 40

def check_file_size(filepath):
    ''' Checks that the file is above a size. '''
    try:
        filesize = os.path.getsize(filepath)
    except Exception as e:
        logging.info('error getting filesize for {}: {}'.format(filepath,e))
        return
    if filesize < MIN_SIZE:
        logging.info('*** filesize below minimum size: {}\n'.format(filepath))


def check_plots(plots_directory, seq, plot_names_list):
    ''' Check that plots exist and have size and remove from the plot_names_list. '''
    seq = seq.zfill(3)
    for filename in os.listdir(plots_directory):
        if filename.startswith(seq):
            # remove the found filename suffix from the suffices list
            plot_names_list = update_plot_names_list(plot_names_list, filename)
            filename_suffix = filename.split('-')[1:]
            filename_suffix = '{}{}'.format('-','-'.join(filename_suffix))
            plot_filename = '{}{}'.format(seq, filename_suffix)
            check_file_size(os.path.join(plots_directory, plot_filename))
            logging.info('found plot: {}'.format(plot_filename))
            logging.debug('suffix list: {}'.format(plot_names_list))
    return plot_names_list


def exit_code(message):
    ''' Exits after displaying message. '''
    logging.info(message)
    logging.info('exiting')
    raise SystemExit


def plots_directory_path(basepath, sequence):
    ''' Find the directory containing the plots. '''
    plots_directory_path = os.path.join(basepath, sequence.zfill(3))
    if not os.path.exists(plots_directory_path):
        exit_code('cannot find plots directory at: {}'.format(plots_directory_path))
    logging.info('found plots directory at: {}'.format(plots_directory_path))
    return plots_directory_path


def plot_names_list(plot_names_filename):
    ''' Create a list of expected filename suffices. '''
    if not os.path.isfile(plot_names_filename):
        exit_code('cannot find file containing plotnames in script directory: {}'.format(plot_names_filename))
    logging.info('looking for expected plot names in: {}'.format(plot_names_filename))
    plot_suffices = []
    with open(plot_names_filename, 'r') as plotnames:
        next(plotnames)
        for plotname in plotnames:
            plot_suffices.append(plotname.strip())
    return plot_suffices


def update_plot_names_list(plot_names_list, found_plot_suffix):
    ''' Remove found_plot_suffix from plot_names_list. '''
    filename_suffix = found_plot_suffix.split('-')[2:]
    filename_suffix = '-'.join(filename_suffix)
    filename_suffix = '{}{}'.format('-', filename_suffix)
    try:
        plot_names_list.remove(filename_suffix)
    except ValueError as e:
        logging.info('*** unexpected plot ending: {}'.format(filename_suffix))
    return plot_names_list


def main(directory_path, args):
    sequence = args.sequence.__str__()
    plots_directory = plots_directory_path(directory_path, sequence)
    plot_names = plot_names_list(PLOTNAMES)
    # the found plots are removed from the plot_names list
    plot_names = check_plots(plots_directory, sequence, plot_names)
    if len(plot_names) != 0:
        logging.info('\n*** plots not found: {}'.format(plot_names))
    else:
        logging.info('\n*** all expected plots found')

if __name__ == '__main__':
    # for testing, comment out the line below, uncomment for production use
    args = parser.parse_args()
    # for testing, uncomment the line below, comment out for production use
    # args = argparse.Namespace(sequence=SEQ)
    main(PLOTS_BASE_DIR, args)


